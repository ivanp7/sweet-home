# functionality {{{

bd ()
{
    local Num="$1"
    [ "$Num" ] || { cd ..; return; }

    local Path="./"
    for i in $(seq $Num)
    do
        local Path="$Path/.."
    done

    cd -- "$Path"
}

bdrm ()
{
    bd "$1"
    rmdir -p -- "$(realpath -s --relative-to "$PWD" "$OLDPWD")"
}

mkcd ()
{
    local DIRS="$@"
    mkdir -p -- "$DIRS"
    cd -- "$DIRS"
}

pwdir ()
{
    /usr/bin/printf "%q\n" "${1:-"$PWD"}"
}

ssh_agent_add ()
{
    [ -z "${SSH_AUTH_SOCK:-}" ] && eval $(ssh-agent -s) > /dev/null
}

ssh_agent_kill ()
{
    [ -n "${SSH_AUTH_SOCK:-}" ] && eval $(ssh-agent -k) > /dev/null
}

ssh_add_auth ()
{
    [ "${SSH_AUTH_SOCK:-}" ] || return

    [ ! -x "$HOME/.ssh/passphrase.sh" ] || local passphrase="$("$HOME/.ssh/passphrase.sh")"

    if [ "${passphrase:-}" ]
    then
        echo '

set home [lindex $argv 0]
set password [lindex $argv 1]

spawn ssh-add
expect "Enter passphrase for $home/.ssh/id_rsa: "
send "$password\n";
expect "Identity added: $home/.ssh/id_rsa ($home/.ssh/id_rsa)"

' | expect - "$HOME" "$passphrase"
    else
        ssh-add
    fi
}

# }}}
# appearance {{{

separator ()
{
    dd if=/dev/zero bs=1 count=${1:-$(tput cols)} status=none | sed 's/./Â·/g'
    echo
}

# }}}

# vim: ft=sh: foldmethod=marker:
